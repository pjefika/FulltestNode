/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, HostListener, Input, Output, ElementRef } from "@angular/core";
import { Point } from "../../popover/common/popover";
var DatagridActionOverflow = (function () {
    function DatagridActionOverflow(elementRef) {
        this.elementRef = elementRef;
        this.anchorPoint = Point.RIGHT_CENTER;
        this.popoverPoint = Point.LEFT_CENTER;
        /**
         * Tracks whether the action overflow menu is open or not
         */
        this._open = false;
        this.openChanged = new EventEmitter(false);
    }
    Object.defineProperty(DatagridActionOverflow.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (open) {
            var boolOpen = !!open;
            if (boolOpen !== this._open) {
                this._open = boolOpen;
                this.openChanged.emit(boolOpen);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Shows/hides the action overflow menu
     */
    DatagridActionOverflow.prototype.toggle = function () {
        this.open = !this.open;
    };
    //called on mouse clicks anywhere in the DOM.
    //Checks to see if the mouseclick happened on the host or outside
    DatagridActionOverflow.prototype.onMouseClick = function (target) {
        if (this._open) {
            var current = target; //Get the element in the DOM on which the mouse was clicked
            var actionMenuHost = this.elementRef.nativeElement; //Get the current actionMenu native HTML element
            if (target.className === "datagrid-action-overflow") {
                return; // if clicking on the action overflow container but not the content, return without closing
            }
            //Start checking if current and actionMenuHost are equal. If not traverse to the parentNode and check again.
            while (current) {
                if (current.className === "datagrid-action-overflow") {
                    break; // if user clicked on the overflow menu, hide it
                }
                if (current === actionMenuHost) {
                    return;
                }
                current = current.parentNode;
            }
            this._open = false; // Hide the overflow menu
        }
    };
    return DatagridActionOverflow;
}());
export { DatagridActionOverflow };
DatagridActionOverflow.decorators = [
    { type: Component, args: [{
                selector: "clr-dg-action-overflow",
                template: "\n        <clr-icon #anchor shape=\"ellipsis-vertical\" class=\"datagrid-action-toggle\" (click)=\"toggle()\"></clr-icon>\n        <ng-template [(clrPopover)]=\"open\" [clrPopoverAnchor]=\"anchor\" [clrPopoverAnchorPoint]=\"anchorPoint\"\n             [clrPopoverPopoverPoint]=\"popoverPoint\">\n            <div #menu class=\"datagrid-action-overflow\">\n                <ng-content></ng-content>\n            </div>\n        </ng-template>\n    "
            },] },
];
/** @nocollapse */
DatagridActionOverflow.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
DatagridActionOverflow.propDecorators = {
    'open': [{ type: Input, args: ["clrDgActionOverflowOpen",] },],
    'openChanged': [{ type: Output, args: ["clrDgActionOverflowOpenChange",] },],
    'onMouseClick': [{ type: HostListener, args: ["document:click", ["$event.target"],] },],
};
//# sourceMappingURL=datagrid-action-overflow.js.map